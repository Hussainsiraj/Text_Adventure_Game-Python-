{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e78cf0fc",
   "metadata": {
    "code_folding": []
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/1z/9fzn_v2s4z984lqc2plhy9cc0000gn/T/ipykernel_44160/833928630.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m##### ACTIONS #####\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0mdriver\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"What's your name? >\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Your name is {driver.upper()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1004\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1005\u001b[0m             )\n\u001b[0;32m-> 1006\u001b[0;31m         return self._input_request(\n\u001b[0m\u001b[1;32m   1007\u001b[0m             \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1008\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"shell\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1049\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1050\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1051\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1052\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1053\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "\n",
    "'''\n",
    "I chose an idea of finding a free parking in the busy city Boston near my college. \n",
    "At beginning I have two options, to park my car in a street and to park in a \n",
    "community college parking. But if go for community college parking, guard at \n",
    "the gate of community college parking may ask for my ID, sticker, or any other \n",
    "proof my college which I donâ€™t have. But the alternatives I must start negotiation with \n",
    "him or to check again and again if he is not at the gate. And \n",
    "if go for street parking and park my car it might be possible to get a ticket which \n",
    "means I will loss the game.\n",
    "'''\n",
    "# # we have a car to park. we have to select street parking or college parking.\n",
    "# We are in college parking . Now we have to deal with the college_gaurd\n",
    "# after negiating with guard or leaving the college parking.  \n",
    "# Introducing dictionaries and while loop\n",
    "# \n",
    "# Introducing dictionaries and while loop\n",
    "\n",
    "##### ACTIONS #####\n",
    "driver =  input(\"What's your name? >\")\n",
    "print(f\"Your name is {driver.upper()}\")\n",
    "\n",
    "\n",
    "def failed(why):\n",
    "    '''\n",
    "    In: Passing in the string showing player how they dies \n",
    "    Result: \n",
    "    Prints reason why they player died. \n",
    "    Programme exits without error.\n",
    "    '''\n",
    "    print(f\"{why}. Try again!\")\n",
    "    # This exits the program entirely.\n",
    "    exit(0)\n",
    "\n",
    "### END ACTIONS ###\n",
    "\n",
    "### CHARACTERS ###\n",
    "def college_gaurd():\n",
    "    '''\n",
    "    Encountering the college_gaurd, the player chooses to attack, check or sneak.\n",
    "    - negotiate: You will definitly be fined\n",
    "    - check: sees what the college_gaurd is doing, but nothing else happens, and get 3 options again\n",
    "    - sneak: player sneaks past the college_gaurd and wins the game\n",
    "    '''\n",
    "    # Actions on the college_gaurd\n",
    "    actions_dict = {\"check\":\"You see the college_gaurd is busy in his lunch. What are you waiting for?\",\n",
    "                    \"sneak\":\"You approach the college_gaurd, he is still busy eathing something after meal you are good to go.\",\n",
    "                    \"negotiate\":\"You swiftly run towards the sleeping college_gaurd and knock him out with the hilt of your shiney sword. Unfortunately it wasn't hard enough.\"}\n",
    "    \n",
    "    # While loop\n",
    "    while True:\n",
    "        action = input(\"What do you do? [negotiate | check | sneak] >\").lower()\n",
    "        if action in actions_dict.keys():\n",
    "            print(actions_dict[action])\n",
    "            if action == \"sneak\":\n",
    "                print(\"You just slipped through the door before the college_gaurd realised it.\")\n",
    "                print(\"You are now outside, home free! Huzzah!\\n\")\n",
    "                return \n",
    "            elif action == \"negotiate\":\n",
    "                failed(\"college_gaurd stop you on the entry poit and check your id, and found guilty and fined game over*****. \\n<GAME OVER>\")\n",
    "\n",
    "### END CHARACTERS ###\n",
    "\n",
    "##### ROOMS #####\n",
    "def college_parking():\n",
    "    '''\n",
    "    The player finds a treasure chest, options to investigate the treasure chest or college_gaurd.\n",
    "    If player chooses\n",
    "    - Treasure chest: show its contents; option to take treasure or ignore it (proceeds to college_gaurd)\n",
    "    - college_gaurd: After checking treasure chest, ignoring treasure chest to check college_gaurd, it calls college_gaurd() function\n",
    "    '''\n",
    "    # So our treasure_chest list contains 4 items.\n",
    "    treasure_chest = [\"shade_parking\", \"free_slot\", \"open_parking\"]\n",
    "    print(f\"\"\"You see a verity of parking in front of you and the college gaurd right in front of the parking\n",
    "    shade_parking, free_slot, open_parking\"\"\")\n",
    "\n",
    "    # Ask player what to do.\n",
    "    action = input(\"What do you do? > \")\n",
    "\n",
    "    # This is a way to see if the text typed by player is in the list\n",
    "    if action.lower() in [\"shade_parking\", \"free_slot\", \"open_parking\"]:\n",
    "        print(\"Oooh, Got parking!\")\n",
    "\n",
    "        print(\"Open it? Press '1'\")\n",
    "        print(\"Leave it alone. Press '2'\")\n",
    "        choice = input(\"> \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            print(\"Let's see what's in here... \")\n",
    "            print(\"the parking is open and the gaurd is busy in lunch at this time the gaurd enjoying the meal cant see you!\")\n",
    "            print(\"You find some\")\n",
    "\n",
    "            # for each treasure (variable created on the fly in the for loop)\n",
    "            # in the treasure_chest list, print the treasure.\n",
    "            for treasure in treasure_chest:\n",
    "                print(treasure)\n",
    "\n",
    "            # So much treasure, what to do? Take it or leave it.\n",
    "            print(\"What do you want to do?\")\n",
    "            # Get number of items in treasure chest with len))\n",
    "            num_items_in_chest = len(treasure_chest)\n",
    "\n",
    "            print(f\"Take all {num_items_in_chest} treasure, press '1'\")\n",
    "            print(\"Leave it, press '2'\")\n",
    "\n",
    "            treasure_choice = input(\"> \")\n",
    "            if treasure_choice == \"1\":\n",
    "                print(\"\\tyou got the shade parking now your car is safe from all type of weather enjoy the parking.\")\n",
    "                \n",
    "                temp_treasure_list = treasure_chest[:]\n",
    "                treasure_contents = \", \".join(treasure_chest)\n",
    "                print(f\"\\tYou also receive {treasure_contents}.\")\n",
    "\n",
    "                # Removing all the rest of the items in the treasure chest\n",
    "                for treasure in temp_treasure_list:\n",
    "                    # Use list remove() function to remove each item in the chest.\n",
    "                    treasure_chest.remove(treasure)\n",
    "\n",
    "                # Add the old sword in place of the new sword\n",
    "                treasure_chest.append(\"crappy sword\") \n",
    "                print(f\"\\tYou close the lid of the chest containing {treasure_chest} for the next adventurer. /grins\")\n",
    "                print(\"Now onward to get past this sleeping college_gaurd and the door to freedom.\")\n",
    "            elif treasure_choice == \"2\":\n",
    "                print(\"It will still be here (I hope), right after I get past this college_gaurd\")\n",
    "        elif choice == \"2\":\n",
    "            print(\"Who needs free parking, let's get out of here.'\")\n",
    "    elif action.lower() in [\"college_gaurd\", \"right\"]:\n",
    "        print(\"Let's have fun with the college_gaurd.\")\n",
    "    else:\n",
    "        print(\"Well, not sure what you picked there, let's poke the college_gaurd cos it's fun!\")\n",
    "    college_gaurd()\n",
    "\n",
    "def street_parking():\n",
    "    '''\n",
    "    The red door rooom contains a red dragon.\n",
    "    \n",
    "    If a player types \"flee\" as an answer, player returns to the room with two doors,\n",
    "    otherwise the player dies.\n",
    "    '''\n",
    "    print(\"There you see a police officer and you dont have permit.\")\n",
    "    print(\"you are in the eye of police camerea .\")\n",
    "    print(\"Do you park or leave?\")\n",
    "\n",
    "    next_move = input(\"> \")\n",
    "\n",
    "    # Flee to return to the start of the game, in the room with the blue and red door or die!\n",
    "    if \"leave\" in next_move:\n",
    "        searching_parking()\n",
    "    else:\n",
    "        # You call the function failed and pass the reason why you died as\n",
    "        # a string as an argument.\n",
    "        failed(\"You get a $500 ticket****** fail !\")\n",
    "### END ROOMS ###\n",
    "\n",
    "def searching_parking():\n",
    "    '''\n",
    "    This function starts the adventure by allowing two options for \n",
    "    players to choose from: red or blue door\n",
    "    Chosen option will print out the door chosen.\n",
    "    '''\n",
    "    print(\"you are in the city you have two options ,street parking and college parking.\")\n",
    "    pick_parking = input(\"Do you pick the street_parking or college_parking? > \")\n",
    "\n",
    "    # Pick a door and we go to a room and something else happens\n",
    "    if pick_parking == \"street_parking\":\n",
    "        street_parking()\n",
    "    elif pick_parking == \"college_parking\":\n",
    "        college_parking()\n",
    "    else:\n",
    "        print(\"Sorry, it's either 'street_parking' or 'college_parking' as the answer. You're the weakest link, goodbye!\")\n",
    "\n",
    "\n",
    "searching_parking()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41fe9777",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "258781ab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
